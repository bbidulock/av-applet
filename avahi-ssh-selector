#!/usr/bin/perl

use Gtk2;
use Net::DBus;
use Net::DBus::GLib;
use Net::Libdnet::Intf;

Gtk2->init;

# ----------------------------------------
package Avahi::ServiceBrowser;
use base qw(Net::DBus::RemoteObject);
use strict;

sub new {
	my ($type,$server,$svtype) = @_;
	my $path = $server->ServiceBrowserNew(-1,-1,$svtype,"",0);
	my $self;
	if ($path) {
		$self = $server->get_service->get_object($path);
		if ($self) {
			bless $self,$type;
			$self->{my}{server} = $server;
			$self->{my}{domain} = $server->{my}{domain};
			$self->{my}{svtype} = $svtype;
			$self->{my}{sigids} = {
				AllForNow	=>$self->connect_to_signal("AllForNow",	    sub{ $self->AllForNow(@_);	    }),
				CacheExhausted	=>$self->connect_to_signal("CacheExhausted",sub{ $self->CacheExhausted(@_); }),
				Failure		=>$self->connect_to_signal("Failure",	    sub{ $self->Failure(@_);	    }),
				ItemNew		=>$self->connect_to_signal("ItemNew",	    sub{ $self->ItemNew(@_);	    }),
				ItemRemove	=>$self->connect_to_signal("ItemRemove",    sub{ $self->ItemRemove(@_);	    }),
			};
		}
	}
	return $self;
}

# ----------------------------------------
package Avahi::Server;
use base qw(Net::DBus::RemoteObject);
use strict;

sub new {
	my $type = shift;
	my $bus = Net::DBus::GLib->system;
	my $service = $bus->get_service("org.freedesktop.Avahi");
	my $self = $service->get_object("/");
	bless $self,$type;
	$self->{my}{bus} = $bus;
	$self->{my}{version} = $self->GetVersionString;
	$self->{my}{apivers} = $self->GetAPIVersion;
	$self->{my}{hostname} = $self->GetHostName;
	$self->{my}{domain} = $self->GetDomainName;
	$self->{my}{fqdn} = $self->GetHostNameFqdn;
	$self->{my}{nsssup} = $self->IsNSSSupportAvailable;
	$self->{my}{state} = $self->GetState;
	$self->{my}{cookie} = $self->GetLocalServiceCookie;
	$self->{my}{sigids} = {
		StateChanged=>$self->connect_to_signal("StateChanged",sub{ $self->StateChanged(@_); }),
	};
	$self->{my}{browser} = Avahi::ServiceBrowser->new($self,'_ssh._tcp');
	return $self;
}
sub StateChanged {
	my ($self,$state,$err) = @_;
	$self->{my}{state} = $state;
	print STDERR $self->get_object_path,": Server error $err\n" if $err;
}
sub destroy {
	my $self = shift;
	delete($self->{my}{local})->destroy;
	delete($self->{my}{browse})->destroy;
	while (my ($name,$sigid) = each %{$self->{my}{sigids}}) {
		$self->disconnect_from_signal($name, $sigid);
	}
}
# ----------------------------------------
package Avahi::Ssh::Applet;
use strict;

our $applet;

sub init {
	my $type = shift;
	$applet = bless {}, $type;
	$applet->{server} = new Avahi::Server;
	return;
}

# ----------------------------------------
package main;
use strict;

Avahi::Ssh::Applet->init;

Gtk2->main;
