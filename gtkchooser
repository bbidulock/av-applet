#!/usr/bin/perl

eval 'exec /usr/bin/perl -S $0 ${1+"$@"}'
	if $running_under_some_shell;

my ($xdmaddress,$clientaddress,$connectiontype);

while ($ARGV[0] =~ /^-/) {
	$_ = shift;
	last if /^--$/;
	if (/^-xdmaddress/)	{ $xdmaddress	    = shift; next; }
	if (/^-clientaddress/)	{ $clientaddress    = shift; next; }
	if (/^-connectionType/) { $connectiontype   = shift; next; }
	die "I don't recognize this switch: $_\n";
}

my @args = ( @ARGV );

use Net::Interface;
use IO::Socket;
use Net::hostent;
use Net::netent;
use Net::protoent;
use Net::servent;


# xdmaddress option is a hex string
# The first to bytes are msb and lsb of the address family (e.g. AF_INET)
# For AF_INET:
#	The next two bytes are the network ordered sin_port
#	The next four bytes are the network ordered sin_addr
# For AF_INET6:
#	The next to bytes are the network ordered sin6_port
#	The next 16 bytes are the network ordered sin6_addr
#
# This is the address of an XDM response socket that the chooser uses
# to write its selection.  The information written to the selection is
# the clientAddress (2byte network-order length, n-byte data), the
# connection type (2byte network-order), followed by the choice (2byte
# network-order length, n-byte data).
#
# The -xdmaddress is the 2byte adddress family, the two byte sin_port or
# sin6_port and the 4 byte sin_addr or 16 byte sin6_addr.  This is the
# address of a TCP socket upon which XDM listens for the response from
# the chooser program.
#
# The -clientaddress is simply the address data (4-bytes for AF_INET
# and 16 bytes for AF_INET6).
#
# The -connectionType is an integer that should simply be returned to
# XDM as it is provided.
#
# The response sent to the XDM socket is the clientAddress as provided
# in -clientaddress argument, the connection type as provided in the
# -connectionType argument, and the host address (sin_addr or sin6_addr
# portion) of the selected host.
#
#

use constant {
	BROADCAST_QUERY=>1,
	QUERY=>2,
	INDIRECT_QUERY=>3,
	FORWARD_QUERY=>4,
	WILLING=>5,
	UNWILLING=>6,
	REQUEST=>7,
	ACCEPT=>8,
	DECLINE=>9,
	MANAGE=>10,
	REFUSE=>11,
	FAILED=>12,
	KEEPALIVE=>13,
	ALIVE=>14,
};


#
# As a chooser we can send out QUERY or BROADCAST_QUERY messages.  The
# QUERY or BROADCAST_QUERY message consists of an XDMCP header and an
# array of authentication names (2-byte length, n-byte value) that
# provide the acceptable authentication methods.
#
# The XDM chooser, however, is not providing any list of authentication
# names whatsoever.  This must be acceptable.
#
# The QUERY or BROADCAST_QUERY then becomes a 2-byte version number (0x00 0x01),
# a 2 byte opcode (0x00 0x01 BROADCAST_QUERY) (0x00 0x02 QUERY), length of
# remaining data bytes (0x00 0x00).
#
# ARGV non-option arguments are a list of host names to which to send
# queries.  The special host name BROADCAST indicates to broadcast to all
# broadcast capable interfaces.  An IPv4 multicast address or IPv6 multicast
# address may also be specified.  Otherwise, they are host names with a
# dotted decimal or hostname format.  QUERY goes to hostnames.  BROADCAST_QUERY
# goes to 'BROADCAST' interfaces.  BROADCAST_QUERY also goes to identifiable
# IPv4 and IPv6 multicast addresses.
#
# When the responses come in they are either WILLING or UNWILLING.  WILLING
# hosts are presented on the chooser list.
#
# We also want to query and provide a choice of managers that are advertizing
# their availability using DNS-SD on _xdmcp._udp.
#

my %queries = ();

foreach my $a (@args) {
	if ($a eq 'BROADCAST') {
		my @interfaces = IO::Interface::Simple->interfaces;
		foreach my $if (@interfaces) {
			if ($if->is_broadcast) {
				my $baddr = $if->broadcast;
				$queries{BROADCAST}{$baddr}{DestAddr} = $baddr;
				$queries{BROADCAST}{$baddr}{QueryType} = BROADCAST_QUERY;
			}
		}
	} else {
	}
}
