#!/usr/bin/perl

use Glib qw(TRUE FALSE);
use Gtk2;
use Gtk2::Notify;
use Gtk2::Unique;
use Net::DBus;
use Net::DBus::GLib;
use Net::Libdnet::Intf;

my @files = Gtk2::Rc->get_default_files();
Gtk2::Rc->set_default_files(@files, "$ENV{HOME}/.gtkrc-2.0.xde");

Gtk2->init;
Gtk2::Notify->init("av-applet");

# -----------------------------------------------------------
package Av;
use strict;

use constant {
	COLUMN_INTERFACE	=> 0, # interface
	COLUMN_INAME		=> 1, # interface name
	COLUMN_PROTOCOL		=> 2, # protocol
	COLUMN_NAME		=> 3, # name
	COLUMN_TYPE		=> 4, # type
	COLUMN_DESCRIP		=> 5, # description
	COLUMN_DOMAIN		=> 6, # domain
	COLUMN_FLAGS		=> 7, # flags
	COLUMN_HOST		=> 8, # host
	COLUMN_APROTOCOL	=> 9, # alternate protocol
	COLUMN_ADDRESS		=>10, # address
	COLUMN_PORT		=>11, # port
	COLUMN_TXT		=>12, # TXT field
	COLUMN_RFLAGS		=>13, # resolve flags
};

use constant {
	IF_UNSPEC	=>-1,
	PROT_UNSPEC	=>-1,
	DOMAIN_UNSPEC	=>"",
};


# -----------------------------------------------------------
package Av::Database;
use GDBM_File;
use strict;

use constant {
	SEARCH_PATHS=>[
		'/usr/lib/avahi/service-types',
		'/usr/lib/i386-linux-gnu/avahi/service-types.db',
	],
};

sub new {
	my $self = bless {}, shift;
	my $fn; my %hash;
	foreach my $f (@{&SEARCH_PATHS}) { if (-r "$f") { $fn = $f; last } }
	tie %hash, 'GDBM_File', $fn, &GDBM_READER, 0644 if $fn;
	$self->{hash} = \%hash;
	return $self;
}
sub lookup {
	my ($self,$key) = @_;
	return $self->{hash}{$key};
}

# -----------------------------------------------------------
package Av::Server;
use base qw(Net::DBus::RemoteObject);
use strict;

sub new {
	my $srv = Net::DBus::GLib->system->get_service('org.freedesktop.Avahi');
	my $self = bless $srv->get_object('/'), shift;
	my $appl = shift;
	$self->{version}  = $self->GetVersionString;
	$self->{apivers}  = $self->GetAPIVersion;
	$self->{hostname} = $self->GetHostName;
	$self->{domain}   = $self->GetDomainName;
	$self->{fqdn}     = $self->GetHostNameFqdn;
	$self->{nsssup}   = $self->IsNSSSupportAvailable;
	$self->{state}    = $self->GetState;
	$self->{cookie}   = $self->GetLocalServiceCookie;
	$self->{sigids}{StateChanged}
		= $self->connect_to_signal("StateChanged",
			sub{ $appl->StateChanged($self,@_); });
	return $self;
}
sub destroy {
	my $self = shift;
	while (my ($name,$sigid) = each %{$self->{sigids}}) {
		$self->disconnect_from_signal($name, $sigid);
	}
}

# -----------------------------------------------------------
package Av::DomainBrowser;
use base qw(Net::DBus::RemoteObject);
use strict;

sub new {
	my ($type,$appl,$domain) = @_;
	$domain = &Av::DOMAIN_UNSPEC unless $domain;
	my $server = $appl->{server};
	my $path = $server->DomainBrowserNew(&Av::IF_UNSPEC,&Av::PROT_UNSPEC,$domain,0,0);
	my $self = $server->get_service->get_object($path);
	bless $self,$type;
	$self->{sigids}{AllForNow}
		= $self->connect_to_signal("AllForNow",
			sub{ $appl->AllForNow($self,@_); });
	$self->{sigids}{CacheExhausted}
		= $self->connect_to_signal("CacheExhausted",
			sub{ $appl->CacheExhausted($self,@_); });
	$self->{sigids}{Failure}
		= $self->connect_to_signal("Failure",
			sub{ $appl->Failure($self,@_); });
	$self->{sigids}{ItemNew}
		= $self->connect_to_signal("ItemNew",
			sub{ $appl->ItemNew($self,@_); });
	$self->{sigids}{ItemRemove}
		= $self->connect_to_signal("ItemRemove",
			sub{ $appl->ItemRemove($self,@_); });
	return $self;
}
sub destroy {
	my $self = shift;
	while (my ($name,$sigid) = each %{$self->{sigids}}) {
		$self->disconnect_from_signal($name,$sigid);
	}
}

# -----------------------------------------------------------
package Av::ServiceTypeBrowser;
use base qw(Net::DBus::RemoteObject);
use strict;

sub new {
	my ($type,$appl,$domain) = @_;
	my $server = $appl->{server};
	my $path = $server->ServiceTypeBrowserNew(
		&Av::IF_UNSPEC,&Av::PROT_UNSPEC,$domain,0);
	my $self = $server->get_service->get_object($path);
	bless $self,$type;
	$self->{sigids}{AllForNow}
		= $self->connect_to_signal("AllForNow",
			sub{ $appl->AllForNow($self,@_); });
	$self->{sigids}{CacheExhausted}
		= $self->connect_to_signal("CacheExhausted",
			sub{ $appl->CacheExhausted($self,@_); });
	$self->{sigids}{Failure}
		= $self->connect_to_signal("Failure",
			sub{ $appl->Failure($self,@_); });
	$self->{sigids}{ItemNew}
		= $self->connect_to_signal("ItemNew",
			sub{ $appl->ItemNew($self,@_); });
	$self->{sigids}{ItemRemove}
		= $self->connect_to_signal("ItemRemove",
			sub{ $appl->ItemRemove($self,@_); });
	return $self;
}
sub destroy {
	my $self = shift;
	while (my ($name,$sigid) = each %{$self->{sigids}}) {
		$self->disconnect_from_signal($name,$sigid);
	}
}

# -----------------------------------------------------------
package Av::ServiceBrowser;
use base qw(Net::DBus::RemoteObject);
use strict;

sub new {
	my ($class,$appl,$domain,$type,$protocol) = @_;
	my $server = $appl->{server};
	my $path = $server->ServiceBrowserNew(&Av::IF_UNSPEC,$protocol,$type,$domain,0);
	my $self = $server->get_service->get_object($path);
	bless $self,$class;
	$self->{domain} = $domain;
	$self->{svtype} = $type;
	$self->{protocol} = $protocol;
	$self->{sigids}{AllForNow}
		= $self->connect_to_signal('AllForNow',
			sub{ $appl->AllForNow($self,@_); });
	$self->{sigids}{CacheExhausted}
		= $self->connect_to_signal('CacheExhausted',
			sub{ $appl->CacheExhausted($self,@_); });
	$self->{sigids}{Failure}
		= $self->connect_to_signal('Failure',
			sub{ $appl->Failure($self,@_); });
	$self->{sigids}{ItemNew}
		= $self->connect_to_signal('ItemNew',
			sub{ $appl->ItemNew($self,@_); });
	$self->{sigids}{ItemRemove}
		= $self->connect_to_signal('ItemRemove',
			sub{ $appl->ItemRemove($self,@_); });
	return $self;
}
sub destroy {
	my $self = shift;
	while (my ($name,$sigid) = each %{$self->{sigids}}) {
		$self->disconnect_from_signal($name,$sigid);
	}
}

# -----------------------------------------------------------
package Av::ServiceModel;
use base qw(Gtk2::ListStore);
use strict;

our $serviceModel;

sub get {
	return $serviceModel if $serviceModel;
	return new Av::ServiceModel;
}
sub new {
	$serviceModel = bless Gtk2::ListStore->new(
		'Glib::String', # interface
		'Glib::String', # interface name
		'Glib::String', # protocol
		'Glib::String', # name
		'Glib::String', # type
		'Glib::String', # description
		'Glib::String', # domain
		'Glib::String', # flags
		'Glib::String', # host
		'Glib::String', # alternate protocol
		'Glib::String', # address
		'Glib::String', # port
		'Glib::String', # TXT field
		'Glib::String', # resolve flags
	), shift;
	return $serviceModel;
}

# -----------------------------------------------------------
package Av::Service;
use strict;

sub new {
	my $self = bless {}, shift;
	my $appl = shift;
	my ($interface,$protocol,$name,$type,$domain,$flags) = @_;
	my ($host,$aprotocol,$address,$port,$txt,$rflags);
	my $server = $appl->{server};
	my $iname = $server->GetNetworkInterfaceNameByIndex($interface);
	$self->{iname} = $iname;
	my @result = $server->ResolveService($interface,$protocol,$name,$type,$domain,-1,0);
	if (@result) {
		($interface, $protocol, $name, $type, $domain, $host,
		 $aprotocol, $address, $port, $txt, $rflags) = @result;
		$self->{host} = $host;
		$self->{aprotocol} = $aprotocol;
		$self->{address} = $address;
		$self->{port} = $port;
		$self->{txt} = [ map {pack('U*',@$_)} @$txt ];
		$self->{rflags} = $rflags;
	}
	$self->{interface} = $interface;
	$self->{protocol} = $protocol;
	$self->{name} = $name;
	$self->{type} = $type;
	$self->{domain} = $domain;
	$self->{flags} = $flags;
	my $descrip = $appl->{database}->lookup($type);
	$self->{descrip} = $descrip;
	my $store = get Av::ServiceModel;
	my $iter = $self->{iter} = $store->append;
	$protocol  = {0=>'IPv6',1=>'IPv4',-1=>'????'}->{$protocol}  if defined $protocol;
	$aprotocol = {0=>'IPv6',1=>'IPv4',-1=>'????'}->{$aprotocol} if defined $aprotocol;
	$store->set($iter,
		&Av::COLUMN_INTERFACE,		$interface,
		&Av::COLUMN_INAME,		$iname,
		&Av::COLUMN_PROTOCOL,		$protocol,
		&Av::COLUMN_NAME,		$name,
		&Av::COLUMN_TYPE,		$type,
		&Av::COLUMN_DESCRIP,		$descrip,
		&Av::COLUMN_DOMAIN,		$domain,
		&Av::COLUMN_FLAGS,		$flags,
		&Av::COLUMN_HOST,		$host,
		&Av::COLUMN_APROTOCOL,		$aprotocol,
		&Av::COLUMN_ADDRESS,		$address,
		&Av::COLUMN_PORT,		$port,
		&Av::COLUMN_TXT,		join(';',@$txt),
		&Av::COLUMN_RFLAGS,		$rflags,
	);
	return $self;
}
sub destroy {
	my $self = shift;
	my $store = get Av::ServiceModel;
	my $iter = $self->{iter};
	$store->remove($iter);
}

# -----------------------------------------------------------
package Av::ServiceWindow;
use base qw(Gtk2::Window);
use Glib qw(TRUE FALSE);
use strict;

our $serviceWindow;

sub get {
	return $serviceWindow if $serviceWindow;
	return new Av::ServiceWindow;
}
sub add_column {
	my ($view,$label,$id,$sort) = @_;
	my $renderer = Gtk2::CellRendererText->new;
	my $column = Gtk2::TreeViewColumn->new_with_attributes(
		$label,$renderer,text=>$id);
	$column->set_sort_column_id($id) if $sort;
	$view->append_column($column);
}
sub new {
	my $self = bless Gtk2::Window->new('toplevel'), shift;
	$self->set_wmclass('avServices','AvApplet');
	$self->set_title('Services');
	$self->set_gravity('center');
	$self->set_position('center');
	$self->set_icon_name('network-wired');
	$self->signal_connect(destroy=>sub{$serviceWindow = undef; 1});
	$self->set_border_width(8);

	my $vbox = Gtk2::VBox->new(FALSE,8);
	$self->add($vbox);

	my $sw = Gtk2::ScrolledWindow->new;
	$sw->set_shadow_type('etched-in');
	$sw->set_policy('never','automatic');
	$vbox->pack_start($sw,TRUE,TRUE,0);

	my $model = get Av::ServiceModel;

	my $view = Gtk2::TreeView->new($model);
	$view->set_rules_hint(TRUE);
	$view->set_search_column(&Av::COLUMN_INAME);
	$sw->add($view);

	my @columns = (
		['Interface',	&Av::COLUMN_INTERFACE,		1],
		['I/F Name',	&Av::COLUMN_INAME,		1],
		['Protocol',	&Av::COLUMN_PROTOCOL,		1],
		['Name',	&Av::COLUMN_NAME,		1],
		['Type',	&Av::COLUMN_TYPE,		1],
		['Description',	&Av::COLUMN_DESCRIP,		1],
		['Domain',	&Av::COLUMN_DOMAIN,		1],
#		['Flags',	&Av::COLUMN_FLAGS,		1],
		['Host',	&Av::COLUMN_HOST,		1],
		['Alt Protocol',&Av::COLUMN_APROTOCOL,		1],
		['Address',	&Av::COLUMN_ADDRESS,		1],
		['Port',	&Av::COLUMN_PORT,		1],
#		['TXT',		&Av::COLUMN_TXT,		1],
		['R.Flags',	&Av::COLUMN_RFLAGS,		1],
	);

	foreach my $col (@columns) { add_column($view,@$col); }

	$self->set_default_size(-1,600);
	$self->show_all;

	$serviceWindow = $self;
	return $self;
}

# -----------------------------------------------------------
package Av::About;
use strict;

sub show {
	Gtk2->show_about_dialog($main::app->{mainw},
		logo_icon_name=>'network-wired',
		program_name=>'av-applet',
		version=>'0.01',
		comments=>'A little avahi applet.',
		copyright=>'Copyright (c) 2013  OpenSS7 Corporation.',
		website=>'http://www.unexicon.com/',
		website_label=>'Unexicon - Linux spun for telecom',
		authors=>['Brian F. G. Bidulock <bidulock@openss7.org>'],
		license=><<EOF,
Do what thou wilt shall be the whole of the law.
-- Aleister Crowley
EOF
		# logo=>,
	);
}

# -----------------------------------------------------------
package Av::Notify;
use base qw(Gtk2::Notify);
use strict;

sub new {
	my $self = bless Gtk2::Notify->new("Avahi","Avahi notification","network-wired"), shift;
	$self->signal_connect_swapped(closed=>$self->can('closed'),$self);
	$self->{state} = 0;
	$self->show;
	return $self;
}
sub closed {
	my ($self,$notify) = @_;
	$self->{state} = 0;
	return Gtk2::EVENT_PROPAGATE;
}

# -----------------------------------------------------------
package Av::Icon;
use base qw(Gtk2::StatusIcon);
use strict;

sub new {
	my $self = bless Gtk2::StatusIcon->new_from_icon_name('network-wired'), shift;
	$self->{notify} = Av::Notify->new($self);
	$self->set_tooltip_text('Avahi applet.');
	$self->set_visible(1);
	foreach my $sig ('popup_menu', 'activate', 'query_tooltip') {
		$self->signal_connect($sig=>$self->can($sig));
	}
	return $self;
}
sub query_tooltip {
	my ($self,$x,$y,$bool,$tooltip) = @_;
#	print "query-tooltip: ",join(', ',@_),"\n";
#	print "Tooltip query!\n";
	return Gtk2::EVENT_PROPAGATE;
}
sub activate {
	my ($self) = @_;
	my $window = get Av::ServiceWindow;
	$window->deiconify;
	$window->show;
	return Gtk2::EVENT_PROPAGATE;
}
sub popup_menu {
	my ($self,$button,$time) = @_;
	print "popup-menu: ",join(', ',@_),"\n";
	print "Popup menu!\n";
	my ($menu,$mi,$im) = Gtk2::Menu->new;
	$mi = Gtk2::ImageMenuItem->new_with_label('Services...');
	$mi->signal_connect(activate=>sub{ get Av::ServiceWindow; 1; });
	$im = Gtk2::Image->new_from_icon_name('applications-system','menu');
	$mi->set_image($im);
	$mi->show_all;
	$menu->append($mi);
	$mi = Gtk2::ImageMenuItem->new_with_label('SSH...');
	$mi->signal_connect(activate=>sub{ get Av::ServiceWindow; 1; });
	$im = Gtk2::Image->new_from_icon_name('system-file-manager','menu');
	$mi->set_image($im);
	$mi->show_all;
	$menu->append($mi);
	$mi = Gtk2::ImageMenuItem->new_with_label('VNC...');
	$mi->signal_connect(activate=>sub{ get Av::ServiceWindow; 1; });
	$im = Gtk2::Image->new_from_icon_name('system-file-manager','menu');
	$mi->set_image($im);
	$mi->show_all;
	$menu->append($mi);
	$mi = Gtk2::ImageMenuItem->new_with_label('About...');
	$mi->signal_connect(activate=>sub{ Av::About->show; });
	$im = Gtk2::Image->new_from_stock('gtk-about','menu');
	$mi->set_image($im);
	$mi->show_all;
	$menu->append($mi);
	$mi = Gtk2::SeparatorMenuItem->new;
	$mi->show_all;
	$menu->append($mi);
	$mi = Gtk2::ImageMenuItem->new_with_label('Quit');
	$im = Gtk2::Image->new_from_stock('gtk-quit','menu');
	$mi->set_image($im);
	$mi->show_all;
	$mi->signal_connect(activate=>sub{ Gtk2->main_quit(); 1; });
	$menu->append($mi);
	$menu->popup(undef,undef,undef,undef,$button,$time);
	return Gtk2::EVENT_PROPAGATE;
}
sub button_press_event {
	my ($self,$event) = @_;
#	print "button-press-event: ",join(', ',@_),"\n";
#	print "Button pressed!\n";
	return Gtk2::EVENT_PROPAGATE;
}
sub button_release_event {
	my ($self,$event) = @_;
#	print "button-release-event: ",join(', ',@_),"\n";
#	print "Button released!\n";
	return Gtk2::EVENT_PROPAGATE;
}
sub scroll_event {
	my ($self,$event) = @_;
#	print "scroll-event: ",join(', ',@_),"\n";
#	print "Scroll!\n";
	return Gtk2::EVENT_PROPAGATE;
}
sub size_changed {
	my ($self,$pixels) = @_;
#	print "size-changed: ",join(', ',@_),"\n";
#	print "Size changed to $pixels!\n";
	return Gtk2::EVENT_PROPAGATE;
}

# -----------------------------------------------------------
package Av::Application;
use base qw(Gtk2::UniqueApp);
use Glib qw(TRUE FALSE);
use strict;

use constant {
	COMMAND_APPLET	=> 1,
	COMMAND_SERVICE	=> 2,
	COMMAND_SSH	=> 3,
	COMMAND_VNC	=> 4,
};

sub new {
	my $self = bless Gtk2::UniqueApp->new(
		'com.unexicon.AvApplet', undef,
		'avahi-applet'	=> &COMMAND_APPLET,
		'avahi-service'	=> &COMMAND_SERVICE,
		'avahi-ssh'	=> &COMMAND_SSH,
		'avahi-vnc'	=> &COMMAND_VNC,
	), shift;
	if ($self->is_running) {
		my $cmd = $0; $cmd =~ s/^.*\///;
		$self->send_message_by_name($cmd=>text=>join('|',$0,@ARGV));
		exit(0);
	}
	$self->{mainw} = Gtk2::Window->new('toplevel');
	$self->{mainw}->set_wmclass('avApplet','AvApplet');
	$self->{mainw}->set_default_icon_name('network-wired');
	$self->watch_window($self->{mainw});
	$self->signal_connect(message_received=>
		$self->can('message_received'));
	$self->{icon} = new Av::Icon;

	$self->{server} = new Av::Server, $self;
	$self->{database} = new Av::Database;
	$self->{service_browsers} = {};
	$self->{service_type_browsers}{local} = 
		Av::ServiceTypeBrowser->new($self,'local');
	$self->{domain_browser} =
		Av::DomainBrowser->new($self);
#	get Av::ServiceWindow;
	return $self;
}

sub message_received {
	my ($self,$command,$message,$time) = @_;
	if ($command == &COMMAND_SERVICE) {
		my $win = get Av::ServiceWindow;
		$win->set_screen($message->get_screen);
	} elsif ($command == &COMMAND_SSH) {
		my $win = get Av::ServiceWindow;
		$win->set_screen($message->get_screen);
	} elsif ($command == &COMMAND_VNC) {
		my $win = get Av::ServiceWindow;
		$win->set_screen($message->get_screen);
	} elsif ($command == &COMMAND_APPLET) {
		my $text = $message->get_text;
		my @args = split(/\|/,$text);
		my $prog = shift @args;
		print STDERR "Another instance was executed as $prog ",join(' ',@args),"\n";
	} else {
		print STDERR "Bad command value $command\n";
	}
	return 'ok';
}

sub AllForNow {
	my $self = shift;
	my $browser = shift;
	#print STDERR "AllForNow: for $browser\n";
}
sub CacheExhausted {
	my $self = shift;
	my $browser = shift;
	#print STDERR "CacheExhausted: for $browser\n";
}
sub Failure {
	my $self = shift;
	my $browser = shift;
	my ($err) = @_;
	print STDERR "Failure: $err for $browser\n";
}
sub ItemNew {
	my $self = shift;
	my $browser = shift;
	my $kind = ref $browser;
	my ($interface,$protocol,$type,$domain,$flags);
	if ($kind eq 'Av::DomainBrowser') {
		($interface,$protocol,$domain,$flags) = @_;
		$self->{service_type_browsers}{$domain}
			= Av::ServiceTypeBrowser->new($self,$domain)
			unless exists $self->{service_type_browsers}{$domain} and
				      $self->{service_type_browsers}{$domain};
	} elsif ($kind eq 'Av::ServiceTypeBrowser') {
		($interface,$protocol,$type,$domain,$flags) = @_;
		my $key = join(':',$domain,$type,$protocol);
		$self->{service_browsers}{$key}
			= Av::ServiceBrowser->new($self,$domain,$type,$protocol)
			unless exists $self->{service_browsers}{$key} and
				      $self->{service_browsers}{$key};
	} elsif ($kind eq 'Av::ServiceBrowser') {
		($interface,$protocol,$type,$domain,$flags) = @_;
		my $key = join(':',@_);
		$self->{services}{$key}
			= Av::Service->new($self,@_)
			unless exists $self->{services}{$key} and
				      $self->{services}{$key};
	}
}
sub ItemRemove {
	my $self = shift;
	my $browser = shift;
	my $kind = ref $browser;
	my ($interface,$protocol,$type,$domain,$flags);
	if ($kind eq 'Av::DomainBrowser') {
		($interface,$protocol,$domain,$flags) = @_;
		if (my $obj = delete $self->{service_type_browsers}{$domain}) {
			$obj->destroy;
		}
	} elsif ($kind eq 'Av::ServiceTypeBrowser') {
		($interface,$protocol,$type,$domain,$flags) = @_;
		my $key = join(':',$domain,$type,$protocol);
		if (my $obj = delete $self->{service_browsers}{$key}) {
			$obj->destroy;
		}
	} elsif ($kind eq 'Av::ServiceBrowser') {
		($interface,$protocol,$type,$domain,$flags) = @_;
		my $key = join(':',@_);
		if (my $obj = delete $self->{services}{$key}) {
			$obj->destroy;
		}
	}
}

# -----------------------------------------------------------
package main;
use strict;

my $app = Av::Application->new;

sub reparse {
	my ($root,$property) = @_;
	my ($type,$format,@data) = $root->property_get($property,undef,0,255,FALSE);
	if ($type and $data[0]) {
		Gtk2::Rc->reparse_all;
		Gtk2::Rc->parse_string("gtk-theme-name=\"$data[0]\"");
	}
}

{
	my $manager = Gtk2::Gdk::DisplayManager->get;
	my $dpy = $manager->get_default_display;
	my $screen = $dpy->get_default_screen;
	my $root = $screen->get_root_window;
	my $property = Gtk2::Gdk::Atom->new(_XDE_THEME_NAME=>FALSE);

	$root->set_events([qw(property-change-mask structure-mask substructure-mask)]);

	Gtk2::Gdk::Event->handler_set(sub{
		my ($event,$data) = @_;
		if (($event->type eq 'client-message' and $event->message_type->name eq "_GTK_READ_RCFILES") ||
		    ($event->type eq 'property-notify' and $event->atom->name eq "_XDE_THEME_NAME")) {
			reparse($root,$property);
			return;
		}
		Gtk2->main_do_event($event);
	},$root);

	reparse($root,$property);
}

Gtk2->main;

1;

__END__

=head1 NAME

av-applet - an avahi mDSN/SDS system tray applet

=head1 SYNOPSIS

av-applet, avahi-ssh-selector, avahi-rfd-selector, avahi-snmp-selector, avahi-xdmcp-selector

=head1 DESCRIPTION

B<av-applet> is a small perl Gtk2 application that installs an icon
into the system tray and provides the ability to browse  mDNS/SDS
services and hosts using a graphical interface.  It also provides
for desktop notifications when the status of services or hosts change.

When invoked as B<avahi-ssh-selector>, B<av-applet> pops up the SSH selector.

When invoked as B<avahi-rdf-selector>, B<av-applet> pops up the RFD selector.

When invoked as B<avahi-snmp-selector>, B<av-applet> pops up the SNMP selector.

When invoked as B<avahi-xdmcp-selector>, B<av-applet> pops up the XDMCP selector.

=head1 SEE ALSO

L<avahi-daemon(8)>

=head1 LICENSE

perl/GPL

=head1 AUTHOR

Brian F. G. Bidulock <bidulock@openss7.org>

=cut
